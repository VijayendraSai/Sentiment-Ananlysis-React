{"ast":null,"code":"const API_BASE = \"http://127.0.0.1:5000\";\nexport const analyzeSentiment = async text => {\n  // Get the JWT token from localStorage (or sessionStorage)\n  const token = localStorage.getItem(\"token\"); // Assuming you store it on login\n\n  // Send the request with Authorization header\n  const response = await fetch(`${API_BASE}/analyze`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}` // Add token here\n    },\n    body: JSON.stringify({\n      text\n    })\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to analyze sentiment\");\n  }\n  return response.json();\n};\nexport const fetchHistory = async () => {\n  const token = localStorage.getItem(\"token\");\n  console.log(\"Fetching history with token:\", token); // Log the token to verify it's being retrieved correctly\n  const response = await fetch(`${API_BASE}/history`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const data = await response.json();\n  console.log(\"HHHHHHHHHHEEEELLLLLLOOOO\");\n  console.log(data); // Log the response data to verify its structure\n  return data;\n};\nexport const loginUser = async (username, password) => {\n  const response = await fetch(`${API_BASE}/auth/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  const data = await response.json();\n\n  // Log the parsed response\n  console.log(data);\n  return data.access_token;\n};\nexport const registerUser = async (username, password) => {\n  const response = await fetch(`${API_BASE}/auth/signup`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n\n  // Await response.json() only once\n  const data = await response.json();\n\n  // Log the parsed response\n  console.log(data);\n  return data;\n};","map":{"version":3,"names":["API_BASE","analyzeSentiment","text","token","localStorage","getItem","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","Error","json","fetchHistory","console","log","data","loginUser","username","password","access_token","registerUser"],"sources":["/Users/vijayendrasai/Documents/Programming/Projects/Sentiment-Analysis-Dashboard/frontend-react/src/api.js"],"sourcesContent":["const API_BASE = \"http://127.0.0.1:5000\";\n\nexport const analyzeSentiment = async (text) => {\n  // Get the JWT token from localStorage (or sessionStorage)\n  const token = localStorage.getItem(\"token\"); // Assuming you store it on login\n\n  // Send the request with Authorization header\n  const response = await fetch(`${API_BASE}/analyze`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`, // Add token here\n    },\n    body: JSON.stringify({ text }),\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to analyze sentiment\");\n  }\n\n  return response.json();\n};\n\nexport const fetchHistory = async () => {\n  const token = localStorage.getItem(\"token\");\n  console.log(\"Fetching history with token:\", token); // Log the token to verify it's being retrieved correctly\n  const response = await fetch(`${API_BASE}/history`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const data = await response.json();\n  console.log(\"HHHHHHHHHHEEEELLLLLLOOOO\");\n  console.log(data); // Log the response data to verify its structure\n  return data;\n};\n\nexport const loginUser = async (username, password) => {\n  const response = await fetch(`${API_BASE}/auth/login`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ username, password }),\n  });\n  const data = await response.json();\n\n  // Log the parsed response\n  console.log(data);\n\n  return data.access_token;\n};\n\nexport const registerUser = async (username, password) => {\n  const response = await fetch(`${API_BASE}/auth/signup`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ username, password }),\n  });\n\n  // Await response.json() only once\n  const data = await response.json();\n\n  // Log the parsed response\n  console.log(data);\n\n  return data;\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB;AAExC,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,IAAI,IAAK;EAC9C;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;EAE7C;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,UAAU,EAAE;IAClDQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAE,UAAUP,KAAK,EAAE,CAAE;IACpC,CAAC;IACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEX;IAAK,CAAC;EAC/B,CAAC,CAAC;EAEF,IAAI,CAACI,QAAQ,CAACQ,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;EAEA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMd,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3Ca,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEhB,KAAK,CAAC,CAAC,CAAC;EACpD,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,UAAU,EAAE;IAClDQ,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAE,UAAUP,KAAK;IAChC;EACF,CAAC,CAAC;EAEF,MAAMiB,IAAI,GAAG,MAAMd,QAAQ,CAACU,IAAI,CAAC,CAAC;EAClCE,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;EACvCD,OAAO,CAACC,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EACnB,OAAOA,IAAI;AACb,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACrD,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,aAAa,EAAE;IACrDQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAES,QAAQ;MAAEC;IAAS,CAAC;EAC7C,CAAC,CAAC;EACF,MAAMH,IAAI,GAAG,MAAMd,QAAQ,CAACU,IAAI,CAAC,CAAC;;EAElC;EACAE,OAAO,CAACC,GAAG,CAACC,IAAI,CAAC;EAEjB,OAAOA,IAAI,CAACI,YAAY;AAC1B,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOH,QAAQ,EAAEC,QAAQ,KAAK;EACxD,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,cAAc,EAAE;IACtDQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAES,QAAQ;MAAEC;IAAS,CAAC;EAC7C,CAAC,CAAC;;EAEF;EACA,MAAMH,IAAI,GAAG,MAAMd,QAAQ,CAACU,IAAI,CAAC,CAAC;;EAElC;EACAE,OAAO,CAACC,GAAG,CAACC,IAAI,CAAC;EAEjB,OAAOA,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}